}
# loop over items to get variants
types$Freq <- NA
for(i in 1:nrow(types)) {
if(!grepl("\\*", types$lemma[i])) {
row1 <- grepw(types$lemma[i], freq$lemma, ignore.case = T)
row2 <- grepw(gsub("ß", "ss", types$lemma[i]), freq$lemma, ignore.case = T)
row3 <- grepw(gsub("ss", "ß", types$lemma[i]), freq$lemma, ignore.case = T)
find_this <- unique(c(row1, row2, row3))
if(length(find_this) > 0) {
types[i,]$Freq <- sum(freq[find_this,]$Freq)
}
}
print(i)
}
# merge dataframes
left_join(w0, types, by = "lemma", all.x = T) %>% nrow
# merge dataframes
left_join(w0, types, by = "lemma", all.x = T)
# merge dataframes
w0 <- left_join(w0, types, by = "lemma", all.x = T)
ws <- left_join(ws, types, by = "lemma", all.x = T)
# add COREX features
ws <- left_join(ws, corex, by = c("ID" = "id", "url" = "url", "forum" = "forum"),
all.x = T)
w0 <- left_join(w0, corex, by = c("ID" = "id", "url" = "url", "forum" = "forum"),
all.x = T)
# This script analyzes the data for
# "um...willen" compared to "um...willens".
# preliminaries -----------------------------------------------------------
# install wizard package if not yet installed
if(!is.element("wizard", installed.packages())) {
devtools::install_github("hartmast/wizard")
}
# load packages
library(tidyverse)
library(ca)
library(explor)
library(readxl)
library(FactoMineR)
library(party)
library(lme4)
library(effects)
library(wizard)
library(RColorBrewer)
library(Hmisc)
# read data ---------------------------------------------------------------
willens <- read_xlsx("um_willens/um_willens_DECOW16BXanno.xlsx")
willen  <- read_xlsx("um_willens/um_willen_sample_DECOW16BXanno.xlsx")
# read metadata -----------------------------------------------------------
freq  <- read_csv("DECOW_metadata/willen_s_wegen_s_lemma_freq.csv")
corex <- read_csv("DECOW_metadata/corex_wegens_willens.csv")
# helper functions --------------------------------------------------------
# grepw: grep entire word
grepw <- function(pattern, x, ...) {
return(grep(paste("^", pattern, "$", sep = "", collapse = ""), x, ...))
}
# data wrangling ----------------------------------------------------------
# sample of 5000 for willen (to make it comparable with wegen sample)
set.seed(200)
willen <- willen[sample(1:10000, 5000),]
# joint dataframe for willen and willens
ws <- willens %>% select(url, ID, forum, cliticised_indef_art, genitives, short_words,
Left, Key, Right, keep, adj, NP_ext, coord, Determiner, case,
Gen, Gen_canonical, Number, compound, compound_binary,
Gender, Proper_name, s_less, abbreviation, pn_or_acro_or_nonnative_in_s,
nonnative, PoS, Nominalisierung, monoref)
w0 <- willen %>% select(url, ID, forum, cliticised_indef_art, genitives, short_words,
Left, Key, Right, keep, adj, NP_ext, coord, Determiner, case,
Gen, Gen_canonical, Number, compound, compound_binary,
Gender, Proper_name, s_less, abbreviation, pn_or_acro_or_nonnative_in_s,
nonnative, PoS, Nominalisierung, monoref)
# add COREX features
ws <- left_join(ws, corex, by = c("ID" = "id", "url" = "url", "forum" = "forum"),
all.x = T)
w0 <- left_join(w0, corex, by = c("ID" = "id", "url" = "url", "forum" = "forum"),
all.x = T)
# add frequency information -----------------------------------------------
# only use lemmas tagged as nouns
freq <- filter(freq, POS %in% c("NN", "NE"))
# list of types
types <- data.frame(lemma = unique(c(w0$lemma, ws$lemma)))
# loop over items to get variants
types$Freq <- NA
for(i in 1:nrow(types)) {
if(!grepl("\\*", types$lemma[i])) {
row1 <- grepw(types$lemma[i], freq$lemma, ignore.case = T)
row2 <- grepw(gsub("ß", "ss", types$lemma[i]), freq$lemma, ignore.case = T)
row3 <- grepw(gsub("ss", "ß", types$lemma[i]), freq$lemma, ignore.case = T)
find_this <- unique(c(row1, row2, row3))
if(length(find_this) > 0) {
types[i,]$Freq <- sum(freq[find_this,]$Freq)
}
}
print(i)
}
# merge dataframes
w0 <- left_join(w0, types, by = "lemma", all.x = T)
ws <- left_join(ws, types, by = "lemma", all.x = T)
# convert categorical columns to factors
cols <- c("forum", "cliticised_indef_art", "genitives",
"short_words", "keep",
"NP_ext", "coord", "Determiner", "case", "Gen", "Gen_canonical",
"lemma", "Number", "compound", "compound_binary",
"Gender", "Proper_name", "s_less", "abbreviation",
"pn_or_acro_or_nonnative_in_s", "nonnative", "PoS", "Nominalisierung", "monoref")
ws[cols] <- lapply(ws[cols], as.factor)
w0[cols] <- lapply(w0[cols], as.factor)
# join together
w <- rbind(mutate(ws, cxn = "willens"),
mutate(w0, cxn = "willen"))
w$cxn <- as.factor(w$cxn)
rm(list=ls())
# install wizard package if not yet installed
if(!is.element("wizard", installed.packages())) {
devtools::install_github("hartmast/wizard")
}
# load packages
library(tidyverse)
library(ca)
library(explor)
library(readxl)
library(FactoMineR)
library(party)
library(lme4)
library(effects)
library(wizard)
library(RColorBrewer)
library(Hmisc)
# read data ---------------------------------------------------------------
willens <- read_xlsx("um_willens/um_willens_DECOW16BXanno.xlsx")
willen  <- read_xlsx("um_willens/um_willen_sample_DECOW16BXanno.xlsx")
freq  <- read_csv("DECOW_metadata/willen_s_wegen_s_lemma_freq.csv")
corex <- read_csv("DECOW_metadata/corex_wegens_willens.csv")
# grepw: grep entire word
grepw <- function(pattern, x, ...) {
return(grep(paste("^", pattern, "$", sep = "", collapse = ""), x, ...))
}
# sample of 5000 for willen (to make it comparable with wegen sample)
set.seed(200)
willen <- willen[sample(1:10000, 5000),]
ws <- willens %>% select(url, ID, forum, cliticised_indef_art, genitives, short_words,
Left, Key, Right, keep, adj, NP_ext, coord, Determiner, case,
Gen, Gen_canonical, Number, compound, compound_binary,
Gender, Proper_name, s_less, abbreviation, pn_or_acro_or_nonnative_in_s,
nonnative, PoS, Nominalisierung, monoref)
w0 <- willen %>% select(url, ID, forum, cliticised_indef_art, genitives, short_words,
Left, Key, Right, keep, adj, NP_ext, coord, Determiner, case,
Gen, Gen_canonical, Number, compound, compound_binary,
Gender, Proper_name, s_less, abbreviation, pn_or_acro_or_nonnative_in_s,
nonnative, PoS, Nominalisierung, monoref)
# add COREX features
ws <- left_join(ws, corex, by = c("ID" = "id", "url" = "url", "forum" = "forum"),
all.x = T)
w0 <- left_join(w0, corex, by = c("ID" = "id", "url" = "url", "forum" = "forum"),
all.x = T)
# only use lemmas tagged as nouns
freq <- filter(freq, POS %in% c("NN", "NE"))
# list of types
types <- data.frame(lemma = unique(c(w0$lemma, ws$lemma)))
types
# This script analyzes the data for
# "um...willen" compared to "um...willens".
# preliminaries -----------------------------------------------------------
# install wizard package if not yet installed
if(!is.element("wizard", installed.packages())) {
devtools::install_github("hartmast/wizard")
}
# load packages
library(tidyverse)
library(ca)
library(explor)
library(readxl)
library(FactoMineR)
library(party)
library(lme4)
library(effects)
library(wizard)
library(RColorBrewer)
library(Hmisc)
# read data ---------------------------------------------------------------
willens <- read_xlsx("um_willens/um_willens_DECOW16BXanno.xlsx")
willen  <- read_xlsx("um_willens/um_willen_sample_DECOW16BXanno.xlsx")
# read metadata -----------------------------------------------------------
freq  <- read_csv("DECOW_metadata/willen_s_wegen_s_lemma_freq.csv")
corex <- read_csv("DECOW_metadata/corex_wegens_willens.csv")
# helper functions --------------------------------------------------------
# grepw: grep entire word
grepw <- function(pattern, x, ...) {
return(grep(paste("^", pattern, "$", sep = "", collapse = ""), x, ...))
}
# data wrangling ----------------------------------------------------------
# sample of 5000 for willen (to make it comparable with wegen sample)
set.seed(200)
willen <- willen[sample(1:10000, 5000),]
# joint dataframe for willen and willens
ws <- willens %>% select(url, ID, forum, cliticised_indef_art, genitives, short_words,
Left, Key, Right, lemma, keep, adj, NP_ext, coord, Determiner, case,
Gen, Gen_canonical, Number, compound, compound_binary,
Gender, Proper_name, s_less, abbreviation, pn_or_acro_or_nonnative_in_s,
nonnative, PoS, Nominalisierung, monoref)
w0 <- willen %>% select(url, ID, forum, cliticised_indef_art, genitives, short_words,
Left, Key, Right, lemma, keep, adj, NP_ext, coord, Determiner, case,
Gen, Gen_canonical, Number, compound, compound_binary,
Gender, Proper_name, s_less, abbreviation, pn_or_acro_or_nonnative_in_s,
nonnative, PoS, Nominalisierung, monoref)
w0$lemma
# add COREX features
ws <- left_join(ws, corex, by = c("ID" = "id", "url" = "url", "forum" = "forum"),
all.x = T)
w0 <- left_join(w0, corex, by = c("ID" = "id", "url" = "url", "forum" = "forum"),
all.x = T)
# only use lemmas tagged as nouns
freq <- filter(freq, POS %in% c("NN", "NE"))
# list of types
types <- data_frame(lemma = unique(c(w0$lemma, ws$lemma)))
# list of types
types <- tibble(lemma = unique(c(w0$lemma, ws$lemma)))
# loop over items to get variants
types$Freq <- NA
for(i in 1:nrow(types)) {
if(!grepl("\\*", types$lemma[i])) {
row1 <- grepw(types$lemma[i], freq$lemma, ignore.case = T)
row2 <- grepw(gsub("ß", "ss", types$lemma[i]), freq$lemma, ignore.case = T)
row3 <- grepw(gsub("ss", "ß", types$lemma[i]), freq$lemma, ignore.case = T)
find_this <- unique(c(row1, row2, row3))
if(length(find_this) > 0) {
types[i,]$Freq <- sum(freq[find_this,]$Freq)
}
}
print(i)
}
# merge dataframes
w0 <- left_join(w0, types, by = "lemma", all.x = T)
ws <- left_join(ws, types, by = "lemma", all.x = T)
# convert categorical columns to factors
cols <- c("forum", "cliticised_indef_art", "genitives",
"short_words", "keep",
"NP_ext", "coord", "Determiner", "case", "Gen", "Gen_canonical",
"lemma", "Number", "compound", "compound_binary",
"Gender", "Proper_name", "s_less", "abbreviation",
"pn_or_acro_or_nonnative_in_s", "nonnative", "PoS", "Nominalisierung", "monoref")
ws[cols] <- lapply(ws[cols], as.factor)
w0[cols] <- lapply(w0[cols], as.factor)
# join together
w <- rbind(mutate(ws, cxn = "willens"),
mutate(w0, cxn = "willen"))
w$cxn <- as.factor(w$cxn)
# only use instances with "keep=T" (i.e. no false hits)
# and pos=Noun (i.e. no pronouns etc.)
# and case=genitive
w <- filter(w, keep == "y" & PoS=="nom" & case=="gen")
# omit unclear cases - gender
w <- filter(w, Gender != "x")
w <- filter(w, Gender != "unclear")
w$Gender <- droplevels(w$Gender)
# omit unclear cases - number
w <- filter(w, Number != "unclear")
w$Number <- droplevels(w$Number)
# add "nominalized infinitive" column
w$NI <- ifelse(w$Nominalisierung=="inf", "y", "n")
w$NI <- as.factor(w$NI)
# add "apposition" column
w$app <- ifelse(grepl("app", w$NP_ext), "y", "n")
w$app <- as.factor(w$app)
# add binary "adjective" column
w$adj_binary <- ifelse(w$adj > 0, "y", "n")
w$adj_binary <- as.factor(w$adj_binary)
qbarplot(w, cxn, Gender, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_brewer("Blues") +
theme_bw()
qbarplot(w, cxn, NI, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
theme_bw()
qbarplot(w, cxn, Gender, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_brewer("Blues") +
theme_bw()
ggsave("willens_genusverteilung.png")
select(w, cxn, lemma, Gender) %>% unique
select(w, cxn, lemma, Gender) %>% unique %>%
qbarplot(cxn, Gender, xlab = "Konstruktion", ylab = "Relative Frequenz") +
theme_bw()
select(w, cxn, lemma, Gender) %>% unique %>%
qbarplot(cxn, Gender, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_brewer("Blues") +
theme_bw()
ggsave("willens_genusverteilung_types.png")
qbarplot(w, cxn, NI, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
theme_bw()
#types:
select(w, cxn, lemma, NI) %>% unique %>%
qbarplot(cxn, NI, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_brewer("Blues") +
theme_bw()
#types:
select(w, cxn, lemma, NI) %>% unique %>%
qbarplot(cxn, NI, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
theme_bw()
w %>% select(cxn, s_less) %>% filter(s_less %in% c("y", "n")) %>% droplevels %>%
qbarplot(cxn, s_less, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
theme_bw()
ggsave("willens_s_los.png")
# ctree for data only for "willen" without "willens"
stree2 <- ctree(s_los ~ NI + Monoreferenz + Apposition + Schonungsbedarf_s + Forum + Freq, data = filter(s2, Variante=="willen"))
# select relevant columns,
# use more intuitive names
s2 <- select(s, s_less, cxn, NI, monoref, app, pn_or_acro_or_nonnative_in_s, forum, Freq)
# subset with strong masculines and neuters
s <- filter(w, s_less %in% c("y", "n"))
s$s_less <- droplevels(s$s_less)
# select relevant columns,
# use more intuitive names
s2 <- select(s, s_less, cxn, NI, monoref, app, pn_or_acro_or_nonnative_in_s, forum, Freq)
colnames(s2) <- c("s_los", "Variante", "NI", "Monoreferenz", "Apposition", "Schonungsbedarf_s", "Forum")
colnames(s2) <- c("s_los", "Variante", "NI", "Monoreferenz", "Apposition", "Schonungsbedarf_s", "Forum", "Frequenz")
stree <- ctree(s_los ~ Variante + NI + Monoreferenz + Apposition + Schonungsbedarf_s + Forum + Frequenz, data = s2)
plot(stree)
s2
s2$LogFreq <- log(s2$Frequenz)
stree <- ctree(s_los ~ Variante + NI + Monoreferenz + Apposition + Schonungsbedarf_s + Forum + LogFreq, data = s2)
plot(stree)
# random forest
sforest <- cforest(s_los ~ Variante + NI + Monoreferenz + Apposition + Schonungsbedarf_s + Forum + LogFreq, data = s2)
# importance of variables
set.seed(1985)
varimp <- varimp(sforest)
dotplot(sort(varimp),
main = "Conditional importance of variables",
scales = list(cex=c(1.5,1.5)),
ylab = list("Variable", cex = 1.5),
xlab = list("Conditional importance", cex = 1.5), cex = 1.5)
# ctree for data only for "willen" without "willens"
stree2 <- ctree(s_los ~ NI + Monoreferenz + Apposition + Schonungsbedarf_s + Forum + LogFreq, data = filter(s2, Variante=="willen"))
plot(stree2)
png("willen_slos_tree_ohne_willens.png", width = 6.5, height = 5, un = "in", res = 300)
plot(stree2)
dev.off()
plot(stree)
png("willen_s_slos_tree.png", width = 6.5, height = 5, un = "in", res = 300)
plot(stree)
dev.off()
length(unique(w$lemma))
length(unique(ws$lemma))
length(unique(w0$lemma))
library(collostructions) # can be found at bit.ly/sflach, if not installed yet
?collex.dist
w %>% select(cxn, lemma)
w %>% select(cxn, lemma) %>% as.data.frame %>% collex.dist(raw = T)
w %>% select(cxn, lemma) %>% as.data.frame
w %>% select(cxn, lemma) %>% as.data.frame %>% collex.dist(raw = T)
w %>% select(cxn, lemma) %>% as.data.frame %>% collex.dist()
w %>% select(cxn, lemma) %>% as.data.frame %>% collex.dist(raw = T)
which(is.na(w))
w %>% select(cxn, lemma) %>% as.data.frame %>% na.omit %>% collex.dist(raw = T)
w %>% select(cxn, lemma) %>% as.data.frame
collex_input <- w %>% select(cxn, lemma) %>% as.data.frame
View(collex_input)
collex.dist(collex_input, raw = T)
collex.dist(collex_input, raw = T, am = "fye")
collex.dist(collex_input, raw = T, am = "fye", reverse = T)
rm(list=ls())
# load packages
library(tidyverse)
library(ca)
library(explor)
library(readxl)
library(FactoMineR)
library(party)
library(lme4)
library(effects)
library(wizard)
library(RColorBrewer)
# read data ---------------------------------------------------------------
wegens <- read_xlsx("wegens/wegens_DECOW16BX_anno.xlsx")
wegen  <- read_xlsx("wegens/wegen_sample_DECOW16BX_anno.xlsx")
freq  <- read_csv("DECOW_metadata/willen_s_wegen_s_lemma_freq.csv")
corex <- read_csv("DECOW_metadata/corex_wegens_willens.csv")
# grepw: grep entire word
grepw <- function(pattern, x, ...) {
return(grep(paste("^", pattern, "$", sep = "", collapse = ""), x, ...))
}
ws <- wegens %>% select(url, ID, forum, cliticised_indef_art, genitives, short_words,
Left, Key, Right, keep, adj, NP_ext, coord, Determiner, case,
Gen, Gen_canonical, lemma, Number, compound, compound_binary,
Gender, Proper_name, s_less, abbreviation, pn_or_acro_or_nonnative_in_s,
nonnative, PoS, Nominalization, monoref, position)
w0 <- wegen %>% select(url, ID, forum, cliticised_indef_art, genitives, short_words,
Left, Key, Right, keep, adj, NP_ext, coord, Determiner, case,
Gen, Gen_canonical, lemma, Number, compound, compound_binary,
Gender, Proper_name, s_less, abbreviation, pn_or_acro_or_nonnative_in_s,
nonnative, PoS, Nominalization, monoref, position)
# add COREX features
ws <- left_join(ws, corex, by = c("ID" = "id", "url" = "url", "forum" = "forum"),
all.x = T)
w0 <- left_join(w0, corex, by = c("ID" = "id", "url" = "url", "forum" = "forum"),
all.x = T)
# only use lemmas tagged as nouns
freq <- filter(freq, POS %in% c("NN", "NE"))
# list of types
types <- tibble(lemma = unique(c(w0$lemma, ws$lemma)))
# loop over items to get variants
types$Freq <- NA
for(i in 1:nrow(types)) {
if(!grepl("\\*", types$lemma[i])) {
row1 <- grepw(types$lemma[i], freq$lemma, ignore.case = T)
row2 <- grepw(gsub("ß", "ss", types$lemma[i]), freq$lemma, ignore.case = T)
row3 <- grepw(gsub("ss", "ß", types$lemma[i]), freq$lemma, ignore.case = T)
find_this <- unique(c(row1, row2, row3))
if(length(find_this) > 0) {
types[i,]$Freq <- sum(freq[find_this,]$Freq)
}
}
print(i)
}
# merge dataframes
w0 <- left_join(w0, types, by = "lemma", all.x = T)
ws <- left_join(ws, types, by = "lemma", all.x = T)
# convert categorical columns to factors
cols <- c("forum", "cliticised_indef_art", "genitives",
"short_words", "keep",
"NP_ext", "coord", "Determiner", "case", "Gen", "Gen_canonical",
"lemma", "Number", "compound", "compound_binary",
"Gender", "Proper_name", "s_less", "abbreviation",
"pn_or_acro_or_nonnative_in_s", "nonnative", "PoS",
"Nominalization", "monoref")
ws[cols] <- lapply(ws[cols], as.factor)
w0[cols] <- lapply(w0[cols], as.factor)
# join together
w <- rbind(mutate(ws, cxn = "wegens"),
mutate(w0, cxn = "wegen"))
w$cxn <- as.factor(w$cxn)
# only use instances with "keep=T" (i.e. no false hits)
# and pos=Noun (i.e. no pronouns etc.)
# and case=genitive
w <- filter(w, keep == "y" & PoS=="nom" & case=="gen")
# omit unclear cases - gender
w <- filter(w, Gender != "x")
w <- filter(w, Gender != "unclear")
w$Gender <- droplevels(w$Gender)
# omit unclear cases - number
w <- filter(w, Number != "unclear")
w$Number <- droplevels(w$Number)
# omit cases with position = both
# (e.g. "wegen dem Mann wegen") -
# they are too rare
w <- filter(w, position != "both")
w$position <- factor(w$position, levels = c("pre", "post"))
# add "nominalized infinitive" column
w$NI <- ifelse(w$Nominalization=="inf", "y", "n")
w$NI <- as.factor(w$NI)
# add "apposition" column
w$app <- ifelse(grepl("app", w$NP_ext), "y", "n")
w$app <- as.factor(w$app)
# add binary "adjective" column
w$adj_binary <- ifelse(w$adj > 0, "y", "n")
w$adj_binary <- as.factor(w$adj_binary)
qbarplot(filter(w, position != "both"), cxn, Gender, position, wrap100 = T,
xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_brewer("Blues") +
theme_bw()
qbarplot(filter(w, position != "both"), cxn, NI, position, wrap100 = T, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
theme_bw()
w %>% select(cxn, s_less, position) %>% filter(s_less %in% c("y", "n")) %>% droplevels %>%
qbarplot(cxn, s_less, position, wrap100 = T, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
guides(fill = guide_legend(title = "s-los")) +
theme_bw()
# same only for unambiguous genitives:
w %>% select(cxn, s_less, position, case) %>% filter(s_less %in% c("y", "n") & case=="gen") %>% droplevels %>%
qbarplot(cxn, s_less, position, wrap100 = T, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
guides(fill = guide_legend(title = "s-los")) +
theme_bw()
# distribution of s- vs. s-less genitives
w %>% select(cxn, s_less, position) %>% filter(s_less %in% c("y", "n")) %>% droplevels %>%
qbarplot(cxn, s_less, position, wrap100 = T, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
guides(fill = guide_legend(title = "s-los")) +
theme_bw()
# same only for unambiguous genitives:
w %>% select(cxn, s_less, position, case) %>% filter(s_less %in% c("y", "n") & case=="gen") %>% droplevels %>%
qbarplot(cxn, s_less, position, wrap100 = T, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
guides(fill = guide_legend(title = "s-los")) +
theme_bw()
# distribution of s- vs. s-less genitives
w %>% select(cxn, s_less, position) %>% filter(s_less %in% c("y", "n")) %>% droplevels %>%
qbarplot(cxn, s_less, position, wrap100 = T, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
guides(fill = guide_legend(title = "s-los")) +
theme_bw()
# same only for unambiguous genitives:
w %>% select(cxn, s_less, position, case) %>% filter(s_less %in% c("y", "n") & case=="gen") %>% droplevels %>%
qbarplot(cxn, s_less, position, wrap100 = T, xlab = "Konstruktion", ylab = "Relative Frequenz") +
scale_fill_manual(values = brewer.pal(9, "Blues")[c(4,6,8)]) +
guides(fill = guide_legend(title = "s-los")) +
theme_bw()
w %>% filter(case=="gen")
source('~/Dropbox/Privat/Projekte/wanderndes_Kasusmorphem/analysis_willen.R')
source('~/Dropbox/Privat/Projekte/wanderndes_Kasusmorphem/analysis_willen.R')
source('~/Dropbox/Privat/Projekte/wanderndes_Kasusmorphem/analysis_willen.R')
setwd("/Users/stefanhartmann/Dropbox/Privat/R_Neuchatel/efficient_dataviz")
plot
?plot
plot(x,y, main = "lowess")
?plot
?par
warnings()
